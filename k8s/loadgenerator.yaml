apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
  namespace: ecommerce-microservices
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: loadgenerator
  template:
    metadata:
      labels:
        app: loadgenerator
    spec:
      terminationGracePeriodSeconds: 5
      initContainers:
      - command:
        - /bin/sh
        - -exc
        - |
          echo "Init container pinging frontend: ${FRONTEND_ADDR}..."
          STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print $2}')
          if test $STATUSCODE -ne 200; then
              echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
              exit 1
          fi
        name: frontend-check
        image: busybox:latest
        env:
        - name: FRONTEND_ADDR
          value: "frontend:80"
      containers:
      - name: loadgenerator
        imagePullPolicy: Always
        image: leofranzen/ecommerce-microservices-loadgenerator:1.0.0
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 80m
            memory: 256Mi
        ports:
        - containerPort: 7000
        env:
        - name: FRONTEND_ADDR
          value: "frontend:80"
        - name: USERS
          value: "10"
---
apiVersion: v1
kind: Service
metadata:
  name: loadgenerator
  namespace: ecommerce-microservices
spec:
  selector:
    app: loadgenerator
  type: ClusterIP
  ports:
  - port: 7000
    targetPort: 7000
